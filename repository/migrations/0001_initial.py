# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2018-08-03 08:47
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ArticleClassify',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classify', models.CharField(max_length=32, verbose_name='文章分类')),
            ],
            options={
                'verbose_name_plural': '文章分类',
                'db_table': 'ArticleClassify',
            },
        ),
        migrations.CreateModel(
            name='ArticleComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='评论内容')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='评论时间')),
            ],
            options={
                'verbose_name_plural': '文章评论',
                'db_table': 'ArticleComment',
            },
        ),
        migrations.CreateModel(
            name='ArticleStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.BooleanField(choices=[(False, '踩'), (True, '赞')], verbose_name='赞踩状态')),
            ],
            options={
                'verbose_name_plural': '赞踩文章状态',
                'db_table': 'ArticleStatus',
            },
        ),
        migrations.CreateModel(
            name='ArticleTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(max_length=32, verbose_name='文章标签')),
            ],
            options={
                'verbose_name_plural': '文章标签',
                'db_table': 'ArticleTag',
            },
        ),
        migrations.CreateModel(
            name='BlogArticle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='文章标题')),
                ('summary', models.CharField(max_length=255, verbose_name='文章简介')),
                ('read_count', models.IntegerField(default=0)),
                ('comment_count', models.IntegerField(default=0)),
                ('up_count', models.IntegerField(default=0)),
                ('down_count', models.IntegerField(default=0)),
                ('add_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='保存日期')),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name='最后修改日期')),
                ('article_type_id', models.IntegerField(choices=[(1, 'Python'), (2, 'Linux'), (3, ' OpenStack'), (4, ' GoLang')], default=None)),
            ],
            options={
                'verbose_name_plural': '博客文章',
                'db_table': 'BlogArticle',
            },
        ),
        migrations.CreateModel(
            name='BlogArticleDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='文章内容')),
                ('bid', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='bid', to='repository.BlogArticle', verbose_name='所属博客')),
            ],
            options={
                'verbose_name_plural': '文章内容',
                'db_table': 'BlogArticleDetail',
            },
        ),
        migrations.CreateModel(
            name='PersonalBlog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=32, verbose_name='博客标题')),
                ('site', models.CharField(max_length=32, unique=True, verbose_name='博客后缀')),
                ('theme', models.CharField(max_length=32, verbose_name='博客主题')),
                ('summary', models.CharField(max_length=128, verbose_name='基本介绍')),
            ],
            options={
                'verbose_name_plural': '个人博客',
                'db_table': 'PersonalBlog',
            },
        ),
        migrations.CreateModel(
            name='TagsToArticle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.BlogArticle', verbose_name='文章')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.ArticleTag', verbose_name='标签')),
            ],
            options={
                'verbose_name_plural': '文章对应标签',
                'db_table': 'TagsToArticle',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=20, unique=True, verbose_name='用户名')),
                ('nickname', models.CharField(max_length=32, verbose_name='昵称')),
                ('pwd', models.CharField(max_length=32, verbose_name='密码')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='邮箱')),
                ('img', models.ImageField(upload_to='', verbose_name='头像')),
            ],
            options={
                'verbose_name_plural': '用户信息',
                'db_table': 'User',
            },
        ),
        migrations.CreateModel(
            name='UserFans',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to='repository.User', verbose_name='粉丝')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='repository.User', verbose_name='博主')),
            ],
            options={
                'verbose_name_plural': '互粉关系',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='fans',
            field=models.ManyToManyField(related_name='f', through='repository.UserFans', to='repository.User', verbose_name='粉丝'),
        ),
        migrations.AddField(
            model_name='personalblog',
            name='pb',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pb', to='repository.User'),
        ),
        migrations.AddField(
            model_name='blogarticle',
            name='blog',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.PersonalBlog', verbose_name='所属博客'),
        ),
        migrations.AddField(
            model_name='blogarticle',
            name='classify',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.ArticleClassify', verbose_name='个人分类'),
        ),
        migrations.AddField(
            model_name='blogarticle',
            name='tags',
            field=models.ManyToManyField(through='repository.TagsToArticle', to='repository.ArticleTag', verbose_name='文章标签'),
        ),
        migrations.AddField(
            model_name='articletag',
            name='pbt',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.PersonalBlog', verbose_name='所属博客'),
        ),
        migrations.AddField(
            model_name='articlestatus',
            name='aid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.BlogArticle', verbose_name='文章'),
        ),
        migrations.AddField(
            model_name='articlestatus',
            name='uid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.User', verbose_name='赞踩用户'),
        ),
        migrations.AddField(
            model_name='articlecomment',
            name='bid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.BlogArticle', verbose_name='评价的文章'),
        ),
        migrations.AddField(
            model_name='articlecomment',
            name='reply',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='back', to='repository.ArticleComment', verbose_name='回复评论'),
        ),
        migrations.AddField(
            model_name='articlecomment',
            name='uid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.User', verbose_name='评价人'),
        ),
        migrations.AddField(
            model_name='articleclassify',
            name='pbc',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.PersonalBlog', verbose_name='所属博客'),
        ),
        migrations.AlterUniqueTogether(
            name='userfans',
            unique_together=set([('user', 'follower')]),
        ),
        migrations.AlterUniqueTogether(
            name='tagstoarticle',
            unique_together=set([('article', 'tag')]),
        ),
        migrations.AlterUniqueTogether(
            name='articlestatus',
            unique_together=set([('aid', 'uid')]),
        ),
    ]
